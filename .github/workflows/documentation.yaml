name: Deploy Docusaurus Documentation

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: npm

      # Install dependencies
      - name: Install Dependencies
        run: npm install

      # Generate API Documentation with TypeDoc
      - name: Generate API Documentation with TypeDoc
        run: npm run docs # Runs TypeDoc and generates API docs in the root docs/API folder

      # Prepare Docusaurus project
      - name: Prepare Docusaurus Project
        run: |
          mkdir -p docusaurus-site/docs
          mkdir -p docusaurus-site/src/css

      # Create Docusaurus Configuration
      - name: Create Docusaurus Configuration
        working-directory: docusaurus-site
        run: |
          # Create package.json
          cat > package.json << 'EOL'
          {
            "name": "snapper-docs",
            "version": "1.0.0",
            "private": true,
            "scripts": {
              "start": "docusaurus start",
              "build": "docusaurus build"
            }
          }
          EOL
          # Create docusaurus.config.js
          cat > docusaurus.config.js << 'EOL'
          const { themes } = require('prism-react-renderer');
          module.exports = {
            title: 'Snapper',
            tagline: 'Snapper Documentation',
            url: 'https://sayfer-io.github.io',
            baseUrl: '/Snapper/',
            trailingSlash: false,
            onBrokenLinks: 'warn',
            onBrokenMarkdownLinks: 'warn',
            favicon: 'https://avatars.githubusercontent.com/u/105142204?s=48&v=4',
            organizationName: 'sayfer-io',
            projectName: 'Snapper',
            deploymentBranch: 'gh-pages',
            presets: [
              [
                '@docusaurus/preset-classic',
                {
                  docs: {
                    sidebarPath: require.resolve('./sidebars.js'),
                    routeBasePath: '/',
                    editUrl: 'https://github.com/sayfer-io/Snapper/blob/main/',
                  },
                  blog: {
                    showReadingTime: true,
                    editUrl: 'https://github.com/sayfer-io/Snapper/edit/main/blog/',
                  },
                  theme: {
                    customCss: require.resolve('./src/css/custom.css'),
                  },
                },
              ],
            ],
            themeConfig: {
              navbar: {
                title: 'Snapper',
                logo: {
                  alt: 'Snapper Logo',
                  src: 'https://avatars.githubusercontent.com/u/105142204?s=200&v=4',
                },
              },
              prism: {
                theme: themes.github,
                darkTheme: themes.dracula,
              },
            },
          };
          EOL
          # Create custom CSS
          echo "/* Custom CSS */" > src/css/custom.css
          # Create intro documentation
          echo "# Introduction to Snapper" > docs/intro.md

      # Create sidebars.js
      - name: Create sidebars.js
        working-directory: docusaurus-site
        run: |
          cat > sidebars.js << 'EOL'
          module.exports = {
            // By default, Docusaurus generates a sidebar from the docs folder structure
            tutorialSidebar: [{type: 'autogenerated', dirName: '.'}],
          };
          EOL

      # Create custom CSS for Docusaurus
      - name: Create custom CSS
        working-directory: docusaurus-site
        run: |
          cat > src/css/custom.css << 'EOL'
          /**
           * Any CSS included here will be global. The classic template
           * bundles Infima by default. Infima is a CSS framework designed to
           * work well for content-centric websites.
           */

          /* You can override the default Infima variables here. */
          :root {
            --ifm-color-primary: #25c2a0;
            --ifm-color-primary-dark: rgb(33, 175, 144);
            --ifm-color-primary-darker: rgb(31, 165, 136);
            --ifm-color-primary-darkest: rgb(26, 136, 112);
            --ifm-color-primary-light: rgb(70, 203, 174);
            --ifm-color-primary-lighter: rgb(102, 212, 189);
            --ifm-color-primary-lightest: rgb(146, 224, 208);
            --ifm-code-font-size: 95%;
          }

          .docusaurus-highlight-code-line {
            background-color: rgba(0, 0, 0, 0.1);
            display: block;
            margin: 0 calc(-1 * var(--ifm-pre-padding));
            padding: 0 var(--ifm-pre-padding);
          }

          html[data-theme='dark'] .docusaurus-highlight-code-line {
            background-color: rgba(0, 0, 0, 0.3);
          }
          EOL

      # Create index.md file with front matter and content
      - name: Create index.md
        working-directory: docusaurus-site/docs
        run: |
          # Add front matter and content to index.md
          echo '---' > index.md
          echo 'slug: /' >> index.md
          echo 'sidebar_position: 1' >> index.md
          echo '---' >> index.md
          echo '# Snapper 🐠' >> index.md
          echo '' >> index.md
          echo 'Welcome to Snapper Docs!' >> index.md
          echo '' >> index.md
          echo 'This is the main landing page for Snapper documentation.' >> index.md
          echo 'You can navigate through the API docs and other sections from here.' >> index.md

      # Install Docusaurus Dependencies
      - name: Install Docusaurus Dependencies
        working-directory: docusaurus-site
        run: |
          npm install @docusaurus/core @docusaurus/preset-classic @docusaurus/theme-classic prism-react-renderer

      # Copy API Docs into Docusaurus docs folder
      - name: Copy API Docs to Docusaurus
        run: cp -r docs/API docusaurus-site/docs/API

      # Run the custom script to remove README files and custom headers
      - name: Run Cleanup Script
        run: |
          # Create cleanup.js file
          echo "
          const fs = require('fs');
          const path = require('path');

          const removeReadmeFiles = (directory) => {
            fs.readdir(directory, (err, files) => {
              if (err) {
                console.error(\`Error reading directory \${directory}:\`, err);
                return;
              }

              files.forEach((file) => {
                const filePath = path.join(directory, file);
                fs.stat(filePath, (err, stats) => {
                  if (err) {
                    console.error(\`Error getting stats for file \${filePath}:\`, err);
                    return;
                  }

                  if (stats.isDirectory()) {
                    removeReadmeFiles(filePath);
                  } else if (file.toLowerCase() === 'readme.md') {
                    fs.unlink(filePath, (err) => {
                      if (err) {
                        console.error(\`Error deleting file \${filePath}:\`, err);
                      }
                    });
                  }
                });
              });
            });
          };

          const headerRegex = /^\[\*\*Snapper Project\*\*]\(\.\.\/(?:\.\.\/)*README\.md\) • \*\*Docs\*\*\n\n/gm;

          function removeCustomHeader(dir) {
            fs.readdirSync(dir).forEach((file) => {
              const filePath = path.join(dir, file);
              if (fs.statSync(filePath).isDirectory()) {
                removeCustomHeader(filePath);
              } else if (filePath.endsWith('.md')) {
                let content = fs.readFileSync(filePath, 'utf8');

                const newContent = content.replace(headerRegex, '');
                if (newContent !== content) {
                  fs.writeFileSync(filePath, newContent, 'utf8');
                }
              }
            });
          }

          removeReadmeFiles('docusaurus-site/docs/API');
          removeCustomHeader('docusaurus-site/docs/API');
          " > cleanup.js

          # Run the cleanup script with Node.js
          node cleanup.js

      # Delete the intro.md page
      - name: Remove intro.md Page
        run: |
          if [ -f docusaurus-site/docs/intro.md ]; then
            echo "Deleting intro.md page..."
            rm docusaurus-site/docs/intro.md
          else
            echo "intro.md not found, skipping deletion."
          fi

      # Build Docusaurus site
      - name: Build Docusaurus Documentation
        working-directory: docusaurus-site
        run: npm run build

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: docusaurus-site/build
          publish_branch: gh-pages
