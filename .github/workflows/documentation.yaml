name: Documentation

on:
  push:
    branches:
      - main
  workflow_run:
    workflows: ["Release"]
    types:
      - completed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: npm

      - name: Install Dependencies
        run: npm install

      - name: Generate API Documentation with TypeDoc
        run: npm run docs

      - name: Prepare Docusaurus Project
        run: |
          mkdir -p docusaurus-site/docs
          mkdir -p docusaurus-site/src/css

      - name: Create Docusaurus Configuration
        working-directory: docusaurus-site
        run: |
          # Create package.json
          cat > package.json << 'EOL'
          {
            "name": "snapper-docs",
            "version": "1.0.0",
            "private": true,
            "scripts": {
              "start": "docusaurus start",
              "build": "docusaurus build"
            }
          }
          EOL
          # Create docusaurus.config.js
          cat > docusaurus.config.js << 'EOL'
          const { themes } = require('prism-react-renderer');
          module.exports = {
            title: 'Snapper',
            tagline: 'Snapper Documentation',
            url: 'https://sayfer-io.github.io',
            baseUrl: '/Snapper/',
            trailingSlash: false,
            onBrokenLinks: 'warn',
            onBrokenMarkdownLinks: 'warn',
            favicon: 'https://avatars.githubusercontent.com/u/105142204?s=48&v=4',
            organizationName: 'sayfer-io',
            projectName: 'Snapper',
            deploymentBranch: 'gh-pages',
            presets: [
              [
                '@docusaurus/preset-classic',
                {
                  docs: {
                    sidebarPath: require.resolve('./sidebars.js'),
                    routeBasePath: '/',
                    editUrl: 'https://github.com/sayfer-io/Snapper/blob/main/',
                  },
                  blog: {
                    showReadingTime: true,
                    editUrl: 'https://github.com/sayfer-io/Snapper/edit/main/blog/',
                  },
                  theme: {
                    customCss: require.resolve('./src/css/custom.css'),
                  },
                },
              ],
            ],
            themeConfig: {
              navbar: {
                title: 'Snapper',
                logo: {
                  alt: 'Snapper Logo',
                  src: 'https://avatars.githubusercontent.com/u/105142204?s=200&v=4',
                },
              },
              prism: {
                theme: themes.github,
                darkTheme: themes.dracula,
              },
            },
          };
          EOL
          # Create custom CSS
          echo "/* Custom CSS */" > src/css/custom.css
          # Create intro documentation
          echo "# Introduction to Snapper" > docs/intro.md

      - name: Create sidebars.js
        working-directory: docusaurus-site
        run: |
          cat > sidebars.js << 'EOL'
          module.exports = {
            // By default, Docusaurus generates a sidebar from the docs folder structure
            tutorialSidebar: [
              {
                type: 'autogenerated', 
                dirName: '.', 
                collapsed: false
              }
            ],
          };
          EOL

      - name: Create custom CSS
        working-directory: docusaurus-site
        run: |
          cat > src/css/custom.css << 'EOL'
          /**
           * Any CSS included here will be global. The classic template
           * bundles Infima by default. Infima is a CSS framework designed to
           * work well for content-centric websites.
           */

          /* You can override the default Infima variables here. */
          :root {
            --ifm-color-primary: #25c2a0;
            --ifm-color-primary-dark: rgb(33, 175, 144);
            --ifm-color-primary-darker: rgb(31, 165, 136);
            --ifm-color-primary-darkest: rgb(26, 136, 112);
            --ifm-color-primary-light: rgb(70, 203, 174);
            --ifm-color-primary-lighter: rgb(102, 212, 189);
            --ifm-color-primary-lightest: rgb(146, 224, 208);
            --ifm-code-font-size: 95%;
          }

          .docusaurus-highlight-code-line {
            background-color: rgba(0, 0, 0, 0.1);
            display: block;
            margin: 0 calc(-1 * var(--ifm-pre-padding));
            padding: 0 var(--ifm-pre-padding);
          }

          html[data-theme='dark'] .docusaurus-highlight-code-line {
            background-color: rgba(0, 0, 0, 0.3);
          }
          EOL

      - name: Create index.md
        working-directory: docusaurus-site/docs
        run: |
          cat > index.md << 'EOF'
          ---
          slug: /
          sidebar_position: 1
          ---
          # Snapper 🐠

          **Snapper** is an open-source security analysis tool built to enhance the security and reliability of Metamask Snaps. It helps developers identify vulnerabilities and ensure adherence to best coding practices. Specifically designed for TypeScript, Snapper detects issues like improper type usage, outdated dependencies, and unsafe handling of external data. It also includes dynamic analysis features, which help uncover runtime vulnerabilities that static analysis alone may miss.

          Seamlessly integrating into development workflows, Snapper provides pre-build checks through a command-line interface and CI pipeline integrations. By leveraging TypeScript's static type-checking and security-focused detectors, Snapper identifies potential exploits early, guiding developers to write more secure code. It also includes unit tests to validate its own security checks.

          Developed by **Sayfer.io**, Snapper is intended as a community-driven tool that allows developers to secure their Metamask Snaps without requiring in-depth security expertise. It aims to support teams in building safer, more reliable Snaps while maintaining development efficiency.

          You can navigate through the API docs and other sections from here.
          EOF
      - name: Install Docusaurus Dependencies
        working-directory: docusaurus-site
        run: |
          npm install @docusaurus/core @docusaurus/preset-classic @docusaurus/theme-classic prism-react-renderer

      - name: Copy API Docs to Docusaurus
        run: cp -r docs/API docusaurus-site/docs/API

      - name: Clear API Documentation
        run: |
          cat > cleanup.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          const removeReadmeFiles = (directory) => {
            fs.readdir(directory, (err, files) => {
              if (err) {
                console.error(`Error reading directory ${directory}:`, err);
                return;
              }

              files.forEach((file) => {
                const filePath = path.join(directory, file);
                fs.stat(filePath, (err, stats) => {
                  if (err) {
                    console.error(`Error getting stats for file ${filePath}:`, err);
                    return;
                  }

                  if (stats.isDirectory()) {
                    removeReadmeFiles(filePath);
                  } else if (file.toLowerCase() === 'readme.md') {
                    fs.unlink(filePath, (err) => {
                      if (err) {
                        console.error(`Error deleting file ${filePath}:`, err);
                      }
                    });
                  }
                });
              });
            });
          };

          const headerRegex = "^\\[\\*\\*Snapper Project\\*\\*\\]\\(\\.\\.\\/(?:\\.\\.\\/)*README\\.md\\) • \\*\\*Docs\\*\\*\\n\\n";

          function removeCustomHeader(dir) {
            fs.readdirSync(dir).forEach((file) => {
              const filePath = path.join(dir, file);
              if (fs.statSync(filePath).isDirectory()) {
                removeCustomHeader(filePath);
              } else if (filePath.endsWith('.md')) {
                let content = fs.readFileSync(filePath, 'utf8');

                const newContent = content.replace(headerRegex, '');
                if (newContent !== content) {
                  fs.writeFileSync(filePath, newContent, 'utf8');
                }
              }
            });
          }

          removeReadmeFiles('docusaurus-site/docs/API');
          removeCustomHeader('docusaurus-site/docs/API');
          EOF

          # Run the cleanup script with Node.js
          node cleanup.js

      - name: Remove intro.md Page
        run: |
          if [ -f docusaurus-site/docs/intro.md ]; then
            echo "Deleting intro.md page..."
            rm docusaurus-site/docs/intro.md
          else
            echo "intro.md not found, skipping deletion."
          fi

      - name: Build Docusaurus Documentation
        working-directory: docusaurus-site
        run: npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          publish_dir: docusaurus-site/build
          publish_branch: gh-pages
